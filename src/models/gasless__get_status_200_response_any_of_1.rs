/*
 * 0x API
 *
 * These are the API references for the beta version of 0x API v2. If you are looking for API v1 references, [see here](/0x-swap-api/api-references/overview).
 *
 * The version of the OpenAPI document: next
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GaslessGetStatus200ResponseAnyOf1 {
    /// Details of the gasless approval transaction
    #[serde(rename = "approvalTransactions", skip_serializing_if = "Option::is_none")]
    pub approval_transactions: Option<Vec<models::GaslessGetStatus200ResponseAnyOfApprovalTransactionsInner>>,
    /// This provides more context about why the transaction failed
    #[serde(rename = "reason")]
    pub reason: Reason,
    /// `failed` means that the order failed to be submitted onchain
    #[serde(rename = "status")]
    pub status: Status,
    /// Details of the gasless swap transaction. If the trade status is `failed`, there may be 0 (if it failed before submission) to multiple transactions (if the transaction reverted)
    #[serde(rename = "transactions")]
    pub transactions: Vec<models::GaslessGetStatus200ResponseAnyOfApprovalTransactionsInner>,
    /// The unique ZeroEx identifier of the request
    #[serde(rename = "zid")]
    pub zid: String,
}

impl GaslessGetStatus200ResponseAnyOf1 {
    pub fn new(reason: Reason, status: Status, transactions: Vec<models::GaslessGetStatus200ResponseAnyOfApprovalTransactionsInner>, zid: String) -> GaslessGetStatus200ResponseAnyOf1 {
        GaslessGetStatus200ResponseAnyOf1 {
            approval_transactions: None,
            reason,
            status,
            transactions,
            zid,
        }
    }
}
/// This provides more context about why the transaction failed
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "transaction_simulation_failed")]
    TransactionSimulationFailed,
    #[serde(rename = "order_expired")]
    OrderExpired,
    #[serde(rename = "last_look_declined")]
    LastLookDeclined,
    #[serde(rename = "transaction_reverted")]
    TransactionReverted,
    #[serde(rename = "market_maker_sigature_error")]
    MarketMakerSigatureError,
    #[serde(rename = "invalid_balance")]
    InvalidBalance,
    #[serde(rename = "internal_error")]
    InternalError,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::TransactionSimulationFailed
    }
}
/// `failed` means that the order failed to be submitted onchain
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Failed
    }
}

