/*
 * 0x API
 *
 * These are the API references for the beta version of 0x API v2. If you are looking for API v1 references, [see here](/0x-swap-api/api-references/overview).
 *
 * The version of the OpenAPI document: next
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GaslessGetStatus200ResponseAnyOf {
    /// Details of the gasless approval transaction
    #[serde(rename = "approvalTransactions", skip_serializing_if = "Option::is_none")]
    pub approval_transactions: Option<Vec<models::GaslessGetStatus200ResponseAnyOfApprovalTransactionsInner>>,
    /// `pending` means that the order has been queued on 0x. `submitted` means that it has been submitted onchain,`succeeded` means it has been included in a block and `confirmed` means it has at least 3 confirmations onchain
    #[serde(rename = "status")]
    pub status: Status,
    /// Details of the gasless swap transaction. If the trade is `pending`, no transaction will be returned. If `submitted`, multiple transactions may be returned, but only one will be mined. If `successful` and `confirmed`, the mined transaction will be returned
    #[serde(rename = "transactions")]
    pub transactions: Vec<models::GaslessGetStatus200ResponseAnyOfApprovalTransactionsInner>,
    /// The unique ZeroEx identifier of the request
    #[serde(rename = "zid")]
    pub zid: String,
}

impl GaslessGetStatus200ResponseAnyOf {
    pub fn new(status: Status, transactions: Vec<models::GaslessGetStatus200ResponseAnyOfApprovalTransactionsInner>, zid: String) -> GaslessGetStatus200ResponseAnyOf {
        GaslessGetStatus200ResponseAnyOf {
            approval_transactions: None,
            status,
            transactions,
            zid,
        }
    }
}
/// `pending` means that the order has been queued on 0x. `submitted` means that it has been submitted onchain,`succeeded` means it has been included in a block and `confirmed` means it has at least 3 confirmations onchain
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "submitted")]
    Submitted,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "confirmed")]
    Confirmed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

