/*
 * 0x API
 *
 * These are the API references for the beta version of 0x API v2. If you are looking for API v1 references, [see here](/0x-swap-api/api-references/overview).
 *
 * The version of the OpenAPI document: next
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SwapPermit2GetQuote200ResponseAnyOfTransaction : This object contains the details required to submit the transaction
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwapPermit2GetQuote200ResponseAnyOfTransaction {
    /// The address of the target contract to send call `data` to
    #[serde(rename = "to")]
    pub to: String,
    /// The calldata containing transaction execution details to be sent to the `to` address
    #[serde(rename = "data")]
    pub data: String,
    /// The estimated gas limit that should be used to send the transaction to guarantee settlement
    #[serde(rename = "gas", deserialize_with = "Option::deserialize")]
    pub gas: Option<Box<serde_json::Value>>,
    /// The gas price (in wei) that should be used to send the transaction
    #[serde(rename = "gasPrice")]
    pub gas_price: Box<serde_json::Value>,
    /// The amount of ether (in wei) that should be sent with the transaction
    #[serde(rename = "value")]
    pub value: Box<serde_json::Value>,
}

impl SwapPermit2GetQuote200ResponseAnyOfTransaction {
    /// This object contains the details required to submit the transaction
    pub fn new(to: String, data: String, gas: Option<serde_json::Value>, gas_price: serde_json::Value, value: serde_json::Value) -> SwapPermit2GetQuote200ResponseAnyOfTransaction {
        SwapPermit2GetQuote200ResponseAnyOfTransaction {
            to,
            data,
            gas: if let Some(x) = gas {Some(Box::new(x))} else {None},
            gas_price: Box::new(gas_price),
            value: Box::new(value),
        }
    }
}

