/*
 * 0x API
 *
 * These are the API references for the beta version of 0x API v2. If you are looking for API v1 references, [see here](/0x-swap-api/api-references/overview).
 *
 * The version of the OpenAPI document: next
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GaslessSubmitRequestTradeEip712Message {
    #[serde(rename = "permitted")]
    pub permitted: Box<models::GaslessSubmitRequestTradeEip712MessagePermitted>,
    #[serde(rename = "spender")]
    pub spender: String,
    #[serde(rename = "nonce", deserialize_with = "Option::deserialize")]
    pub nonce: Option<Box<models::GaslessSubmitRequestTradeEip712MessagePermittedAmount>>,
    #[serde(rename = "deadline", deserialize_with = "Option::deserialize")]
    pub deadline: Option<Box<models::GaslessSubmitRequestTradeEip712MessagePermittedAmount>>,
    #[serde(rename = "slippageAndActions")]
    pub slippage_and_actions: Box<models::GaslessSubmitRequestTradeEip712MessageSlippageAndActions>,
}

impl GaslessSubmitRequestTradeEip712Message {
    pub fn new(permitted: models::GaslessSubmitRequestTradeEip712MessagePermitted, spender: String, nonce: Option<models::GaslessSubmitRequestTradeEip712MessagePermittedAmount>, deadline: Option<models::GaslessSubmitRequestTradeEip712MessagePermittedAmount>, slippage_and_actions: models::GaslessSubmitRequestTradeEip712MessageSlippageAndActions) -> GaslessSubmitRequestTradeEip712Message {
        GaslessSubmitRequestTradeEip712Message {
            permitted: Box::new(permitted),
            spender,
            nonce: if let Some(x) = nonce {Some(Box::new(x))} else {None},
            deadline: if let Some(x) = deadline {Some(Box::new(x))} else {None},
            slippage_and_actions: Box::new(slippage_and_actions),
        }
    }
}

