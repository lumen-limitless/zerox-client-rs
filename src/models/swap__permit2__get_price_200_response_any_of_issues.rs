/*
 * 0x API
 *
 * These are the API references for the beta version of 0x API v2. If you are looking for API v1 references, [see here](/0x-swap-api/api-references/overview).
 *
 * The version of the OpenAPI document: next
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SwapPermit2GetPrice200ResponseAnyOfIssues : An object containing potential issues discovered during 0x validation that can prevent the swap from being executed successfully by the `taker`
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SwapPermit2GetPrice200ResponseAnyOfIssues {
    #[serde(rename = "allowance", deserialize_with = "Option::deserialize")]
    pub allowance: Option<Box<models::SwapPermit2GetPrice200ResponseAnyOfIssuesAllowance>>,
    #[serde(rename = "balance", deserialize_with = "Option::deserialize")]
    pub balance: Option<Box<models::SwapPermit2GetPrice200ResponseAnyOfIssuesBalance>>,
    /// This is set to `true` when 0x cannot validate the transaction. This happens when the `taker` has an insufficient balance of the `sellToken` and 0x is unable to peform ehanced quote validation with the low balance. Note that this does not necessarily mean that the trade will revert
    #[serde(rename = "simulationIncomplete")]
    pub simulation_incomplete: bool,
    /// A list of invalid sources present in `excludedSources` request. See https://api.0x.org/sources?chainId= with the desired chain's ID for the list of valid sources
    #[serde(rename = "invalidSourcesPassed")]
    pub invalid_sources_passed: Vec<String>,
}

impl SwapPermit2GetPrice200ResponseAnyOfIssues {
    /// An object containing potential issues discovered during 0x validation that can prevent the swap from being executed successfully by the `taker`
    pub fn new(allowance: Option<models::SwapPermit2GetPrice200ResponseAnyOfIssuesAllowance>, balance: Option<models::SwapPermit2GetPrice200ResponseAnyOfIssuesBalance>, simulation_incomplete: bool, invalid_sources_passed: Vec<String>) -> SwapPermit2GetPrice200ResponseAnyOfIssues {
        SwapPermit2GetPrice200ResponseAnyOfIssues {
            allowance: if let Some(x) = allowance {Some(Box::new(x))} else {None},
            balance: if let Some(x) = balance {Some(Box::new(x))} else {None},
            simulation_incomplete,
            invalid_sources_passed,
        }
    }
}

