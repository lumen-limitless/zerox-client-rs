/*
 * 0x API
 *
 * These are the API references for the beta version of 0x API v2. If you are looking for API v1 references, [see here](/0x-swap-api/api-references/overview).
 *
 * The version of the OpenAPI document: next
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`swap_allowance_holder_get_price`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SwapAllowanceHolderGetPriceError {
    Status400(models::SwapPermit2GetPrice400Response),
    Status422(models::SwapPermit2GetPrice422Response),
    Status500(models::SwapPermit2GetPrice500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`swap_allowance_holder_get_quote`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SwapAllowanceHolderGetQuoteError {
    Status400(models::SwapPermit2GetPrice400Response),
    Status422(models::SwapPermit2GetPrice422Response),
    Status500(models::SwapPermit2GetPrice500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`swap_permit2_get_price`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SwapPermit2GetPriceError {
    Status400(models::SwapPermit2GetPrice400Response),
    Status422(models::SwapPermit2GetPrice422Response),
    Status500(models::SwapPermit2GetPrice500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`swap_permit2_get_quote`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SwapPermit2GetQuoteError {
    Status400(models::SwapPermit2GetPrice400Response),
    Status422(models::SwapPermit2GetPrice422Response),
    Status500(models::SwapPermit2GetPrice500Response),
    UnknownValue(serde_json::Value),
}


/// Get the indicative price for a swap using Allowance Holder to set allowances
pub async fn swap_allowance_holder_get_price(configuration: &configuration::Configuration, param_0x_api_key: &str, chain_id: i32, buy_token: &str, sell_token: &str, sell_amount: &str, param_0x_version: Option<&str>, taker: Option<&str>, tx_origin: Option<&str>, swap_fee_recipient: Option<&str>, swap_fee_bps: Option<i32>, swap_fee_token: Option<&str>, trade_surplus_recipient: Option<&str>, gas_price: Option<&str>, slippage_bps: Option<i32>, excluded_sources: Option<&str>) -> Result<models::SwapPermit2GetPrice200Response, Error<SwapAllowanceHolderGetPriceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/swap/allowance-holder/price", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("chainId", &chain_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("buyToken", &buy_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellToken", &sell_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellAmount", &sell_amount.to_string())]);
    if let Some(ref local_var_str) = taker {
        local_var_req_builder = local_var_req_builder.query(&[("taker", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_origin {
        local_var_req_builder = local_var_req_builder.query(&[("txOrigin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_bps {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_token {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = trade_surplus_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("tradeSurplusRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_price {
        local_var_req_builder = local_var_req_builder.query(&[("gasPrice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slippage_bps {
        local_var_req_builder = local_var_req_builder.query(&[("slippageBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_sources {
        local_var_req_builder = local_var_req_builder.query(&[("excludedSources", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("0x-api-key", param_0x_api_key.to_string());
    if let Some(local_var_param_value) = param_0x_version {
        local_var_req_builder = local_var_req_builder.header("0x-version", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SwapAllowanceHolderGetPriceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the firm quote for a swap using Allowance Holder to set allowances
pub async fn swap_allowance_holder_get_quote(configuration: &configuration::Configuration, param_0x_api_key: &str, chain_id: i32, buy_token: &str, sell_token: &str, sell_amount: &str, taker: &str, param_0x_version: Option<&str>, tx_origin: Option<&str>, swap_fee_recipient: Option<&str>, swap_fee_bps: Option<i32>, swap_fee_token: Option<&str>, trade_surplus_recipient: Option<&str>, gas_price: Option<&str>, slippage_bps: Option<i32>, excluded_sources: Option<&str>) -> Result<models::SwapAllowanceHolderGetQuote200Response, Error<SwapAllowanceHolderGetQuoteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/swap/allowance-holder/quote", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("chainId", &chain_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("buyToken", &buy_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellToken", &sell_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellAmount", &sell_amount.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("taker", &taker.to_string())]);
    if let Some(ref local_var_str) = tx_origin {
        local_var_req_builder = local_var_req_builder.query(&[("txOrigin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_bps {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_token {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = trade_surplus_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("tradeSurplusRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_price {
        local_var_req_builder = local_var_req_builder.query(&[("gasPrice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slippage_bps {
        local_var_req_builder = local_var_req_builder.query(&[("slippageBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_sources {
        local_var_req_builder = local_var_req_builder.query(&[("excludedSources", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("0x-api-key", param_0x_api_key.to_string());
    if let Some(local_var_param_value) = param_0x_version {
        local_var_req_builder = local_var_req_builder.header("0x-version", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SwapAllowanceHolderGetQuoteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the indicative price for a swap using Permit2 to set allowances
pub async fn swap_permit2_get_price(configuration: &configuration::Configuration, param_0x_api_key: &str, chain_id: i32, buy_token: &str, sell_token: &str, sell_amount: &str, param_0x_version: Option<&str>, taker: Option<&str>, tx_origin: Option<&str>, swap_fee_recipient: Option<&str>, swap_fee_bps: Option<i32>, swap_fee_token: Option<&str>, trade_surplus_recipient: Option<&str>, gas_price: Option<&str>, slippage_bps: Option<i32>, excluded_sources: Option<&str>) -> Result<models::SwapPermit2GetPrice200Response, Error<SwapPermit2GetPriceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/swap/permit2/price", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("chainId", &chain_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("buyToken", &buy_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellToken", &sell_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellAmount", &sell_amount.to_string())]);
    if let Some(ref local_var_str) = taker {
        local_var_req_builder = local_var_req_builder.query(&[("taker", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_origin {
        local_var_req_builder = local_var_req_builder.query(&[("txOrigin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_bps {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_token {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = trade_surplus_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("tradeSurplusRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_price {
        local_var_req_builder = local_var_req_builder.query(&[("gasPrice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slippage_bps {
        local_var_req_builder = local_var_req_builder.query(&[("slippageBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_sources {
        local_var_req_builder = local_var_req_builder.query(&[("excludedSources", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("0x-api-key", param_0x_api_key.to_string());
    if let Some(local_var_param_value) = param_0x_version {
        local_var_req_builder = local_var_req_builder.header("0x-version", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SwapPermit2GetPriceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the firm quote for a swap using Permit2 to set allowances
pub async fn swap_permit2_get_quote(configuration: &configuration::Configuration, param_0x_api_key: &str, chain_id: i32, buy_token: &str, sell_token: &str, sell_amount: &str, taker: &str, param_0x_version: Option<&str>, tx_origin: Option<&str>, swap_fee_recipient: Option<&str>, swap_fee_bps: Option<i32>, swap_fee_token: Option<&str>, trade_surplus_recipient: Option<&str>, gas_price: Option<&str>, slippage_bps: Option<i32>, excluded_sources: Option<&str>) -> Result<models::SwapPermit2GetQuote200Response, Error<SwapPermit2GetQuoteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/swap/permit2/quote", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("chainId", &chain_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("buyToken", &buy_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellToken", &sell_token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sellAmount", &sell_amount.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("taker", &taker.to_string())]);
    if let Some(ref local_var_str) = tx_origin {
        local_var_req_builder = local_var_req_builder.query(&[("txOrigin", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_bps {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = swap_fee_token {
        local_var_req_builder = local_var_req_builder.query(&[("swapFeeToken", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = trade_surplus_recipient {
        local_var_req_builder = local_var_req_builder.query(&[("tradeSurplusRecipient", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_price {
        local_var_req_builder = local_var_req_builder.query(&[("gasPrice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slippage_bps {
        local_var_req_builder = local_var_req_builder.query(&[("slippageBps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_sources {
        local_var_req_builder = local_var_req_builder.query(&[("excludedSources", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("0x-api-key", param_0x_api_key.to_string());
    if let Some(local_var_param_value) = param_0x_version {
        local_var_req_builder = local_var_req_builder.header("0x-version", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SwapPermit2GetQuoteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

